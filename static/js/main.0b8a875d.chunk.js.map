{"version":3,"sources":["timestamp.tsx","util.ts","NoteLine.ts","DriveSyncHandler.ts","Note.ts","LocalStore.ts","NoteContentHandler.ts","noterow.tsx","notetitle.tsx","menu.tsx","statusarea.tsx","App.tsx","serviceWorker.js","index.js"],"names":["Timestamp","props","interval","state","timestamp","initialTimestamp","className","this","toLocaleString","hour","minute","second","hour12","setState","Date","shouldTick","setupTimer","prevProps","prevState","window","clearInterval","setInterval","tick","React","Component","computeIndentString","units","Array","INDENT_LENGTH","fill","join","DriveSignInState","DriveSyncStatus","NoteLine","editTimestamp","note","indentedUnits","content","creationTimestamp","updateLastEditTime","setEditTimestamp","i","trim","length","id","getTime","rawNoteLine","noteLine","setContent","setCreationTimestamp","Note","noteLines","Map","noteLineIdsOrdered","title","creationTime","timestampsLocked","driveId","makeDefaultTitle","toLocaleDateString","set","push","from","values","get","Math","min","keys","locked","isEmpty","output","forEach","line","convertToText","lineIndex","indexOf","max","delete","idIndex","splice","console","error","orderedNoteLineIds","map","noteLineId","undefined","Error","serialize","rawNote","setTitle","setTimestampsLocked","setDriveId","parsedNoteLines","deserialize","noteLineMap","setNoteLines","getNoteStorageId","localStorage","JSON","stringify","lastEditKey","parse","debug","LocalStore","saveNote","getLastEditedNote","NoteRow","timestampElement","createRef","entryboxElement","getLine","rowId","getIndentedUnits","entryboxContent","computeEntryboxContent","getContent","editedSinceLastFocus","focused","ref","getLastEditTimestamp","computeTimestampShouldTick","inputRef","onFocus","handleEntryboxFocus","bind","onKeyDown","handleKeyDown","onChange","handleChange","value","readOnly","getTimestampsLocked","rawContent","oldProps","oldState","setIndentedUnits","NoteContentHandler","updateNote","current","focus","e","target","keyDownHandler","key","preventDefault","shiftKey","focusHandler","currentRawLength","textLength","setSelectionRange","NoteTitle","divRef","editing","onClick","handleClick","contentEditable","onBlur","handleBlur","suppressContentEditableWarning","titleChangeHandler","textContent","blur","DISCOVERY_DOCS","DOC_MIME","signedInEventHandlers","syncStatusChangeHandlers","fireSyncStatusChange","LOADING","gapi","load","initClient","client","init","apiKey","clientId","discoveryDocs","scope","then","auth2","getAuthInstance","isSignedIn","listen","handleIsSignedInState","log","SIGNED_OUT","signInState","SIGNED_IN","handler","newStatus","SYNCING","getDriveId","getParentFolderId","parentId","drive","files","create","name","getTitle","mimeType","parents","response","status","result","uploadContent","SYNCED","xhr","XMLHttpRequest","open","setRequestHeader","getToken","access_token","Promise","resolve","reject","onload","send","Menu","driveSignInState","DriveSyncHandler","addSignInStateHandler","toggleTimestampsString","driveMenuItems","Dropdown","Item","signOutHandler","signInHandler","DropdownButton","alignRight","newNoteHandler","timestampLockToggleHandler","Divider","SyncStatusArea","addSyncStatusChangeHandler","handleSyncStatusChange","syncStatus","text","showDocsLink","noteDriveId","href","rel","LockIcon","visibleText","noteLocked","StatusArea","App","wrapperElement","editedSinceLastDriveSync","syncTimer","firstNoteLineId","createNewNote","getFirstNoteLineId","focusedNoteRowId","addLine","updateWindowTitle","setTimeout","syncTimerHandler","clearTimeout","noteRows","getLines","noteRow","handleNoteRowKeyDown","noteRowFocusHandler","handleTitleChange","handleToggleTimestampsLocked","signIn","signOut","newTitle","document","newNote","focusedRow","nextFocusedRowId","getPreviousRowId","deleteRow","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0b8a875d.chunk.js","sourcesContent":["import React from \"react\";\n\ninterface TimestampState {\n    timestamp: Date;\n}\n\ninterface TimestampProps {\n    shouldTick: boolean;\n    initialTimestamp: Date;\n}\n\nexport class Timestamp extends React.Component<TimestampProps, TimestampState> {\n    interval: number;\n\n    constructor(props: TimestampProps) {\n        super(props);\n        this.state = { timestamp: this.props.initialTimestamp };\n        this.interval = -1;\n    }\n\n    render() {\n        return (\n            <span className=\"timestamp\">\n                {this.state.timestamp.toLocaleString(\"en-us\", {\n                    hour: \"2-digit\",\n                    minute: \"2-digit\",\n                    second: \"2-digit\",\n                    hour12: false\n                })}\n            </span>\n        );\n    }\n\n    tick() {\n        this.setState(state => ({ timestamp: new Date() }));\n    }\n\n    componentDidMount() {\n        if (this.props.shouldTick) {\n            this.setupTimer();\n        }\n    }\n\n    componentDidUpdate(prevProps: TimestampProps, prevState: TimestampState) {\n        if (prevProps.shouldTick !== this.props.shouldTick) {\n            if (this.props.shouldTick) {\n                this.setupTimer();\n            } else {\n                window.clearInterval(this.interval);\n            }\n        }\n    }\n\n    setupTimer() {\n        this.interval = window.setInterval(() => this.tick(), 500);\n    }\n\n    componentWillUnmount() {\n        window.clearInterval(this.interval);\n    }\n}\n","import { INDENT_LENGTH } from './NoteLine'\r\n\r\nexport function computeIndentString(units: number): string {\r\n    /*eslint no-array-constructor: \"error\"*/\r\n    return new Array(units * INDENT_LENGTH)\r\n        .fill(\" \")\r\n        .join(\"\");\r\n}\r\n\r\nexport function removeIndent(str: string): string {\r\n    if (str.slice(0, INDENT_LENGTH - 1).trim().length === 0) {\r\n        return str.slice(INDENT_LENGTH);\r\n    }\r\n    \r\n    return str;\r\n}","import { Note } from \"./Note\";\nimport { computeIndentString } from \"./util\";\n\nexport const INDENT_LENGTH = 4;\n\nexport interface RawNoteLine {\n  content: string,\n  indentedUnits: number,\n  id: number,\n  editTimestamp: number;\n}\n\nexport class NoteLine {\n  private content: string = \"\";\n  private indentedUnits: number = 0;\n  private creationTimestamp: Date;\n\n  constructor(private editTimestamp: Date, private note: Note, indentedUnits?: number) {\n    this.creationTimestamp = new Date();\n    this.indentedUnits = indentedUnits || 0;\n  }\n\n  private setCreationTimestamp(timestamp: Date) {\n    this.creationTimestamp = timestamp;\n  }\n\n  get id(): number {\n    return this.creationTimestamp.getTime();\n  }\n\n  getContent(): string {\n    return this.content;\n  }\n\n  setContent(content: string, updateLastEditTime?: boolean) {\n    this.content = content;\n\n    if (updateLastEditTime) {\n      this.setEditTimestamp(new Date());\n    }\n  }\n\n  getLastEditTimestamp(): Date {\n    return this.editTimestamp;\n  }\n\n  setEditTimestamp(timestamp: Date) {\n    this.editTimestamp = timestamp;\n  }\n\n  getIndentedUnits(): number {\n    return this.indentedUnits;\n  }\n\n  setIndentedUnits(i: number) {\n    this.indentedUnits = i;\n  }\n\n  isEmpty(): boolean {\n    return (this.content.trim().length === 0);\n  }\n\n  convertToText(): string {\n    return this.editTimestamp.toLocaleString(\"en-us\", {\n                    hour: \"2-digit\",\n                    minute: \"2-digit\",\n                    second: \"2-digit\",\n                    hour12: false\n                })\n                + \" - \"\n                + computeIndentString(this.indentedUnits)\n                + this.content;\n  }\n\n  serialize(): RawNoteLine {\n    return {\n      id: this.id,\n      content: this.content,\n      indentedUnits: this.indentedUnits,\n      editTimestamp: this.editTimestamp.getTime()\n    }\n  }\n\n  static deserialize(note: Note, rawNoteLine: RawNoteLine): NoteLine {\n    let noteLine = new NoteLine(new Date(rawNoteLine.editTimestamp), note, rawNoteLine.indentedUnits);\n\n    noteLine.setContent(rawNoteLine.content)\n    noteLine.setCreationTimestamp(new Date(rawNoteLine.id));\n    return noteLine;\n  }\n}\n","import { Note } from \"./Note\";\r\n\r\ndeclare var gapi: any;\r\n\r\nconst API_KEY = \"AIzaSyBEH9v-TByqUFESw8vjl2YEDgAKoWm7n_8\";\r\nconst CLIENT_ID = \"370774814885-7kseam56ntmpklgnr9p00f8gh968cmtb.apps.googleusercontent.com\";\r\n// Array of API discovery doc URLs for APIs used by the quickstart\r\nconst DISCOVERY_DOCS = [\"https://www.googleapis.com/discovery/v1/apis/drive/v3/rest\"];\r\n\r\n// Authorization scopes required by the API; multiple scopes can be\r\n// included, separated by spaces.\r\nconst SCOPES = 'https://www.googleapis.com/auth/drive.file';\r\n\r\nconst DIRECTORY_MIME = \"application/vnd.google-apps.folder\";\r\nconst DOC_MIME = \"application/vnd.google-apps.document\";\r\n\r\nconst PARENT_NAME = \"Synced Interview Notes\";\r\nconst PARENT_ID_STORAGE_KEY = \"parent-drive-id\";\r\n\r\nexport enum DriveSignInState {\r\n    LOADING,\r\n    SIGNED_OUT,\r\n    SIGNED_IN\r\n}\r\n\r\nexport enum DriveSyncStatus {\r\n    LOADING,\r\n    SIGNED_OUT,\r\n    SYNCING,\r\n    SYNCED\r\n}\r\n\r\ntype SignedInEventHandler = (isSignedIn: DriveSignInState) => void;\r\ntype SyncStatusChangeHandler = (isSignedIn: DriveSyncStatus) => void;\r\n\r\nclass DriveSyncHandler {\r\n    private signedInEventHandlers: Array<SignedInEventHandler> = [];\r\n    private syncStatusChangeHandlers: Array<SyncStatusChangeHandler> = [];\r\n\r\n    async init(): Promise<void> {\r\n        this.fireSyncStatusChange(DriveSyncStatus.LOADING);\r\n        return gapi.load('client:auth2', this.initClient.bind(this));\r\n    }\r\n\r\n    initClient() {\r\n        gapi.client.init({\r\n            apiKey: API_KEY,\r\n            clientId: CLIENT_ID,\r\n            discoveryDocs: DISCOVERY_DOCS,\r\n            scope: SCOPES\r\n        }).then(() => {\r\n            // Listen for sign-in state changes.\r\n            gapi.auth2.getAuthInstance().isSignedIn.listen(this.handleIsSignedInState.bind(this));\r\n\r\n            this.handleIsSignedInState(gapi.auth2.getAuthInstance().isSignedIn.get());\r\n        })\r\n    }\r\n\r\n    handleIsSignedInState(isSignedIn: boolean) {\r\n        console.log('user is now', isSignedIn);\r\n\r\n        if (!isSignedIn) {\r\n            this.fireSyncStatusChange(DriveSyncStatus.SIGNED_OUT);\r\n        }\r\n\r\n        let signInState = (isSignedIn) ? DriveSignInState.SIGNED_IN : DriveSignInState.SIGNED_OUT;\r\n        for (let handler of this.signedInEventHandlers) {\r\n            handler(signInState);\r\n        }\r\n    }\r\n\r\n    addSignInStateHandler(handler: SignedInEventHandler) {\r\n        this.signedInEventHandlers.push(handler);\r\n    }\r\n\r\n    addSyncStatusChangeHandler(handler: SyncStatusChangeHandler) {\r\n        this.syncStatusChangeHandlers.push(handler);\r\n    }\r\n    \r\n    fireSyncStatusChange(newStatus: DriveSyncStatus) {\r\n        for (let handler of this.syncStatusChangeHandlers) {\r\n            handler(newStatus);\r\n        }\r\n    }\r\n\r\n    isUserSignedIn(): boolean {\r\n        return gapi.auth2.getAuthInstance().isSignedIn.get()\r\n    }\r\n\r\n    async saveNote(note: Note): Promise<string> {\r\n        this.fireSyncStatusChange(DriveSyncStatus.SYNCING);\r\n        let id = \"\";\r\n        if (note.getDriveId().length === 0 && !note.isEmpty()) {\r\n            console.log(\"Creating new note to drive: \", note);\r\n            let parentId = await this.getParentFolderId();\r\n\r\n            let response = await gapi.client.drive.files.create({\r\n                name: note.getTitle(),\r\n                mimeType: DOC_MIME,\r\n                parents: [parentId],\r\n            })\r\n\r\n            console.log(\"Got create response: \", response);\r\n\r\n            if (response.status !== 200) {\r\n                throw new Error(\"Got bad create response code\");\r\n            }\r\n            id = response.result.id;\r\n        } else if (note.getDriveId().length !== 0) {\r\n            console.log(\"Saving note to drive: \", note);\r\n            id = note.getDriveId();\r\n        }\r\n\r\n        if (id.length > 0) {\r\n            await this.uploadContent(id, note.convertToText());\r\n        }\r\n        this.fireSyncStatusChange(DriveSyncStatus.SYNCED);\r\n\r\n        return id;\r\n    }\r\n\r\n    async getParentFolderId(): Promise<string> {\r\n        let id = window.localStorage[PARENT_ID_STORAGE_KEY];\r\n        if (id === undefined) {\r\n            console.log(\"Creating new parent folder...\");\r\n            let response = await gapi.client.drive.files.create({\r\n                mimeType: DIRECTORY_MIME,\r\n                name: PARENT_NAME\r\n            })\r\n\r\n            console.log(\"got create response: \", response);\r\n            if (response.status !== 200) {\r\n                throw new Error(\"Got bad create response code\");\r\n            }\r\n\r\n            id = response.result.id;\r\n            window.localStorage[PARENT_ID_STORAGE_KEY] = id;\r\n        } else {\r\n            console.log(\"Reusing drive id: \", id);\r\n        }\r\n        return id;\r\n    }\r\n\r\n    async uploadContent(driveId: string, content: string): Promise<string> {\r\n        console.log(\"About to upload content for\", driveId);\r\n        let xhr = new XMLHttpRequest();\r\n        xhr.open(\"PATCH\", \"https://www.googleapis.com/upload/drive/v3/files/\" + driveId + \"?uploadType=media\");\r\n        xhr.setRequestHeader(\"Authorization\", \"Bearer \" + gapi.client.getToken().access_token);\r\n        xhr.setRequestHeader(\"Content-Type\", DOC_MIME);\r\n\r\n        return new Promise<string>((resolve, reject) => {\r\n            xhr.onload = () => resolve();\r\n            xhr.send(content);\r\n        });\r\n    }\r\n}\r\n\r\n\r\nexport default new DriveSyncHandler();","import { RawNoteLine, NoteLine } from \"./NoteLine\";\n\nexport interface RawNote {\n  id: number,\n  title: string,\n  noteLines: Array<RawNoteLine>\n  timestampsLocked: boolean;\n  driveId: string;\n}\n\nexport class Note {\n  noteLines: Map<number, NoteLine> = new Map<number, NoteLine>();\n  // Since new lines can be inserted anywhere in the note, we need\n  // a separate array keeping track of the visual ordering of the rows\n  // in the note relative to each other.\n  noteLineIdsOrdered: Array<number> = [];\n  private title: string;\n  private creationTime: Date;\n  private timestampsLocked: boolean = false;\n  private driveId: string = \"\";\n\n  constructor() {\n    this.creationTime = new Date();\n\n    this.title = this.makeDefaultTitle();\n  }\n\n  makeDefaultTitle(): string {\n    return \"Interview on \"+ this.creationTime.toLocaleDateString();\n  }\n\n  get id(): number {\n    return this.creationTime.getTime();\n  }\n\n  addLine(indentedUnits?: number): NoteLine {\n    let noteLine = new NoteLine(new Date(), this, indentedUnits);\n    this.noteLines.set(noteLine.id, noteLine);\n    this.noteLineIdsOrdered.push(noteLine.id);\n\n    return noteLine;\n  }\n\n  getLines(): Array<NoteLine> {\n    return Array.from(this.noteLines.values());\n  }\n\n  getLine(id: number): NoteLine | undefined {\n    return this.noteLines.get(id);\n  }\n\n  getFirstNoteLineId(): number {\n    return Math.min(...Array.from(this.noteLines.keys()));\n  }\n\n  getTitle(): string {\n      return this.title;\n  }\n\n  setTitle(title: string) {\n    this.title = title;\n  }\n\n  getTimestampsLocked(): boolean {\n    return this.timestampsLocked;\n  }\n\n  setTimestampsLocked(locked: boolean) {\n    this.timestampsLocked = locked;\n  }\n\n  getDriveId(): string {\n    return this.driveId || \"\";\n  }\n\n  setDriveId(driveId: string) {\n    this.driveId = driveId;\n  }\n\n  isEmpty(): boolean {\n    for (let line of this.noteLines.values()) {\n      if (!line.isEmpty()) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  convertToText(): string {\n\n    let output = \"\";\n    this.noteLines.forEach(line => {\n      output += line.convertToText() + \"\\n\";\n    });\n\n    return output;\n  }\n\n  getPreviousRowId(id: number): number | null {\n    let lineIndex = this.noteLineIdsOrdered.indexOf(id);\n\n    if (lineIndex === -1) {\n      return null;\n    }\n\n    return this.noteLineIdsOrdered[Math.max(0, lineIndex - 1)];\n  }\n\n  deleteRow(id: number) {\n    this.noteLines.delete(id);\n    let idIndex = this.noteLineIdsOrdered.indexOf(id);\n\n    if (idIndex !== -1) {\n      this.noteLineIdsOrdered.splice(idIndex);\n    } else {\n      console.error(\"Tried to delete non-existent row with ID: \", id, this);\n    }\n  }\n\n  private setNoteLines(orderedNoteLineIds: Array<number>, noteLines: Map<number, NoteLine>) {\n    this.noteLineIdsOrdered = orderedNoteLineIds;\n    this.noteLines = noteLines;\n  }\n\n  serialize(): RawNote {\n    return {\n      title: this.title,\n      id: this.id,\n      timestampsLocked: this.timestampsLocked,\n      driveId: this.driveId,\n      noteLines: this.noteLineIdsOrdered.map(noteLineId => {\n        let noteLine = this.noteLines.get(noteLineId);\n        \n        if (noteLine === undefined) {\n          console.error(\"Note: \", this);\n          throw new Error(\"Got undefined note line during serialization.\");\n        }\n\n        return noteLine.serialize();\n      })\n    }\n  }\n\n  static deserialize(rawNote: RawNote): Note {\n    let note = new Note();\n    note.setTitle(rawNote.title);\n    note.setTimestampsLocked(rawNote.timestampsLocked);\n    note.setDriveId(rawNote.driveId);\n\n    let parsedNoteLines = rawNote.noteLines.map(rawNoteLine => NoteLine.deserialize(note, rawNoteLine));\n    let noteLineMap = new Map<number, NoteLine>();\n    parsedNoteLines.forEach(noteLine => noteLineMap.set(noteLine.id, noteLine));\n    note.setNoteLines(rawNote.noteLines.map(rawNoteLine => rawNoteLine.id), noteLineMap);\n    return note;\n  }\n}\n","import { Note } from \"./Note\";\r\n\r\nconst LAST_EDIT_KEY = 'lastEditedNote';\r\nclass LocalStore {\r\n\r\n    saveNote(note: Note) {\r\n        let id = this.getNoteStorageId(note);\r\n        window.localStorage[id] = JSON.stringify(note.serialize());\r\n        window.localStorage[LAST_EDIT_KEY] = id;\r\n    }\r\n\r\n    getLastEditedNote(): Note | null {\r\n        let lastEditKey = window.localStorage[LAST_EDIT_KEY];\r\n        if (lastEditKey === undefined) {\r\n            return null;\r\n        }\r\n\r\n        let rawNote = window.localStorage[lastEditKey];\r\n\r\n        if (rawNote === undefined) {\r\n            console.error(\"Tried to fetch non-existent note: \", lastEditKey);\r\n            return null;\r\n        }\r\n\r\n        return Note.deserialize(JSON.parse(rawNote));\r\n    }\r\n\r\n    getNoteStorageId(note: Note): string {\r\n        return 'note-' + note.id;\r\n    }\r\n}\r\n\r\nexport default new LocalStore();","import { Note } from './Note';\r\nimport LocalStore from \"./LocalStore\";\r\n\r\nclass NoteContentHandler {\r\n    updateNote(note: Note) {\r\n        console.debug(\"Updating note: \", note);\r\n        LocalStore.saveNote(note);\r\n    }\r\n\r\n    getLastEditedNote(): Note | null {\r\n        return LocalStore.getLastEditedNote();\r\n    }\r\n}\r\n\r\nexport default new NoteContentHandler();","import React from \"react\";\nimport { Timestamp } from \"./timestamp\";\nimport { NoteLine } from \"./NoteLine\";\nimport { Note } from \"./Note\";\nimport NoteContentHandler from \"./NoteContentHandler\";\nimport { computeIndentString } from \"./util\";\nimport TextareaAutosize from 'react-textarea-autosize';\n\n\ninterface NoteRowProps {\n    focusHandler: Function;\n    keyDownHandler: Function;\n    note: Note;\n    rowId: number;\n    focused: boolean;\n}\n\ninterface NoteRowState {\n    indentedUnits: number;\n    entryboxContent: string;\n    editedSinceLastFocus: boolean;\n}\n\nexport class NoteRow extends React.Component<NoteRowProps, NoteRowState> {\n    timestampElement = React.createRef<Timestamp>();\n    entryboxElement = React.createRef<HTMLTextAreaElement>();\n    noteLine: NoteLine;\n\n    constructor(props: NoteRowProps) {\n        super(props);\n\n        let noteLine = props.note.getLine(props.rowId);\n        if (noteLine === undefined) {\n            console.error(\"Note: \", props.note);\n            throw new Error(\"Got bad row id. Provided row id: \" + props.rowId);\n        }\n\n        this.noteLine = noteLine;\n\n        this.state = {\n            indentedUnits: this.noteLine.getIndentedUnits(),\n            entryboxContent: this.computeEntryboxContent(this.noteLine.getIndentedUnits(), this.noteLine.getContent()),\n            editedSinceLastFocus: false\n        };\n    }\n\n    render() {\n        return (\n            <div className={`noterow ${this.props.focused ? 'noterow-focused' : 'noterow-unfocused'}`}>\n                <Timestamp ref={this.timestampElement}\n                    initialTimestamp={this.noteLine.getLastEditTimestamp()}\n                    shouldTick={this.computeTimestampShouldTick()} />\n                <TextareaAutosize inputRef={this.entryboxElement}\n                    onFocus={this.handleEntryboxFocus.bind(this)}\n                    onKeyDown={this.handleKeyDown.bind(this)}\n                    onChange={this.handleChange.bind(this)}\n                    value={this.state.entryboxContent}\n                    readOnly={!this.props.focused}\n                    className=\"entrybox\" />\n            </div>\n        )\n    }\n\n    computeTimestampShouldTick() {\n        if (this.props.note.getTimestampsLocked()) {\n            return false;\n        }\n\n        let isEmpty = (this.state.entryboxContent.trim().length === 0);\n        if (isEmpty && this.props.focused) {\n            return true;\n        }\n        \n        if (!isEmpty && this.state.editedSinceLastFocus) {\n            return true;\n        }\n\n        return false;\n    }\n\n    computeEntryboxContent(indentedUnits: number, rawContent: string) {\n        return computeIndentString(indentedUnits) + rawContent.trim();\n    }\n\n\n    componentDidUpdate(oldProps: NoteRowProps, oldState: NoteRowState) {\n        if (oldState.indentedUnits !== this.state.indentedUnits) {\n            this.setState(state => ({\n                entryboxContent: this.computeEntryboxContent(this.state.indentedUnits, this.state.entryboxContent)\n            }));\n            this.noteLine.setIndentedUnits(this.state.indentedUnits);\n        }\n\n        if (oldState.entryboxContent !== this.state.entryboxContent) {\n            this.noteLine.setContent(this.state.entryboxContent, true);\n            NoteContentHandler.updateNote(this.props.note);\n        }\n\n        if (oldProps.focused !== this.props.focused && !this.props.focused) {\n            this.setState({ editedSinceLastFocus: false })\n        }\n        if (this.entryboxElement.current !== null) {\n            if (this.props.focused) {\n                this.entryboxElement.current.focus();\n            }\n        }\n    }\n\n    componentDidMount() {\n        if (this.entryboxElement.current !== null) {\n            if (this.props.focused) {\n                this.entryboxElement.current.focus();\n            }\n        }\n    }\n\n    handleChange(e: React.ChangeEvent) {\n        this.setState({ entryboxContent: (e.target as HTMLTextAreaElement).value, editedSinceLastFocus: true });\n        NoteContentHandler.updateNote(this.props.note);\n    }\n\n    handleKeyDown(e: React.KeyboardEvent) {\n        if (!this.props.keyDownHandler(this.noteLine, e)) {\n            return;\n        }\n\n        if (e.key === \"Tab\") {\n            e.preventDefault();\n            if (e.shiftKey) {\n                this.setState(state => ({ indentedUnits: Math.max(state.indentedUnits - 1, 0) }));\n            } else {\n                this.setState(state => ({ indentedUnits: state.indentedUnits + 1 }));\n            }\n        }\n    }\n\n    handleEntryboxFocus(e: React.FocusEvent) {\n        this.props.focusHandler(this.noteLine);\n\n        if (this.state.entryboxContent.trim().length === 0 && this.entryboxElement.current != null) {\n            let currentRawLength = this.entryboxElement.current.textLength;\n            this.entryboxElement.current.setSelectionRange(currentRawLength, currentRawLength);\n        }\n    }\n}","import React from 'react';\n\ninterface NoteTitleProps {\n    title: string;\n    titleChangeHandler: (newTitle: string) => any;\n}\n\ninterface NoteTitleState {\n    editing: boolean;\n}\n\nexport class NoteTitle extends React.Component<NoteTitleProps, NoteTitleState> {\n    divRef = React.createRef<HTMLDivElement>();\n\n    constructor(props: NoteTitleProps) {\n        super(props);\n\n        this.state = { editing: false }\n    }\n\n    render() {\n        return (\n            <div className=\"note-title\"\n            ref={this.divRef}\n            onClick={this.handleClick.bind(this)}\n            contentEditable={true}\n            onKeyDown={this.handleKeyDown.bind(this)}\n            onBlur={this.handleBlur.bind(this)}\n            suppressContentEditableWarning={true}>\n                {this.props.title}\n            </div>\n        )\n    }\n\n    handleClick(e: React.MouseEvent) {\n        this.setState({ editing: true });\n    }\n\n    handleKeyDown(e: React.KeyboardEvent) {\n        if (e.key === 'Enter' && this.divRef.current !== null) {\n            e.preventDefault();\n            this.props.titleChangeHandler(this.divRef.current.textContent || \"\");\n            this.setState({ editing: false})\n            this.divRef.current.blur();\n        }\n    }\n\n    handleBlur(e: React.FocusEvent) {\n        if (this.divRef.current !== null) {\n            this.divRef.current.textContent = this.props.title;\n        }\n    }\n}","import React from 'react';\r\nimport Dropdown from 'react-bootstrap/Dropdown';\r\nimport DropdownButton from 'react-bootstrap/DropdownButton';\r\nimport {DriveSignInState} from './DriveSyncHandler';\r\nimport DriveSyncHandler from './DriveSyncHandler';\r\n\r\ninterface MenuProps {\r\n    newNoteHandler: () => void;\r\n    timestampLockToggleHandler: () => void;\r\n    signInHandler: () => void;\r\n    signOutHandler: () => void;\r\n    timestampsLocked: boolean;\r\n}\r\n\r\ninterface MenuState {\r\n  open: boolean;\r\n  driveSignInState: DriveSignInState;\r\n}\r\n\r\nexport class Menu extends React.Component<MenuProps, MenuState> {\r\n    constructor(props: MenuProps) {\r\n        super(props);\r\n\r\n        this.state = { open: false, driveSignInState: DriveSignInState.LOADING}\r\n        DriveSyncHandler.addSignInStateHandler((isSignedIn: DriveSignInState) =>{\r\n            this.setState({ driveSignInState: isSignedIn})\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let toggleTimestampsString = (this.props.timestampsLocked)\r\n                        ? \"Unlock Timestamps\"\r\n                        : \"Lock Timestamps\";\r\n        \r\n        let driveMenuItems: Array<any> = [];\r\n\r\n        if (this.state.driveSignInState === DriveSignInState.SIGNED_IN) {\r\n            driveMenuItems = [\r\n                <Dropdown.Item key=\"signout\" onClick={(e: React.MouseEvent<any>) => this.props.signOutHandler()}>\r\n                    Sign out of Google Drive\r\n                </Dropdown.Item>\r\n            ]\r\n        } else if (this.state.driveSignInState === DriveSignInState.SIGNED_OUT) {\r\n            driveMenuItems = [\r\n                <Dropdown.Item key=\"signin\" onClick={(e: React.MouseEvent<any>) => this.props.signInHandler()}>\r\n                    Sign into Google Drive\r\n                </Dropdown.Item>\r\n            ];\r\n        } else {\r\n            driveMenuItems = [\r\n                <Dropdown.Item key=\"loading\" onClick={(e: React.MouseEvent<any>) => this.props.signInHandler()}>\r\n                    Drive Login Loading...\r\n                </Dropdown.Item>\r\n            ];\r\n        }\r\n\r\n        \r\n        return (\r\n            <DropdownButton alignRight id=\"menu\" title=\"Menu\">\r\n                <Dropdown.Item onClick={(e: React.MouseEvent<any>) => this.props.newNoteHandler()}>New Note</Dropdown.Item>\r\n                <Dropdown.Item onClick={(e: React.MouseEvent<any>) => this.props.timestampLockToggleHandler()}>\r\n                    {toggleTimestampsString}\r\n                </Dropdown.Item>\r\n                <Dropdown.Divider />\r\n                {driveMenuItems}\r\n            </DropdownButton>\r\n        )\r\n    }\r\n\r\n    handleMenuIconClick(e: React.MouseEvent) {\r\n    }\r\n\r\n    resetHandler(e: React.MouseEvent) {\r\n    }\r\n}","import React from \"react\";\r\nimport DriveSyncHandler, { DriveSyncStatus } from \"./DriveSyncHandler\";\r\n\r\ninterface SyncStatusAreaProps {\r\n  noteDriveId: string;\r\n}\r\n\r\ninterface SyncStatusAreaState {\r\n    syncStatus: DriveSyncStatus;\r\n}\r\n\r\nclass SyncStatusArea extends React.Component<SyncStatusAreaProps, SyncStatusAreaState> {\r\n    constructor(props: SyncStatusAreaProps) {\r\n        super(props);\r\n\r\n        DriveSyncHandler.addSyncStatusChangeHandler(this.handleSyncStatusChange.bind(this));\r\n        this.state = {syncStatus: DriveSyncStatus.LOADING };\r\n    }\r\n\r\n    handleSyncStatusChange(newStatus: DriveSyncStatus) {\r\n        this.setState({ syncStatus: newStatus });\r\n    }\r\n\r\n  render() {\r\n      let className = \"\";\r\n      let text = \"\";\r\n\r\n      switch (this.state.syncStatus) {\r\n          case DriveSyncStatus.SYNCING:\r\n              className = \"syncing\";\r\n              text = \"Syncing note to Drive...\";\r\n              break;\r\n          case DriveSyncStatus.SYNCED:\r\n              className = \"synced\";\r\n              text = \"Add content to sync note...\";\r\n              break;\r\n          case DriveSyncStatus.LOADING:\r\n              className = \"loading\";\r\n              text = \"Loading Drive state...\";\r\n              break;\r\n          case DriveSyncStatus.SIGNED_OUT:\r\n              className = \"signed-out\";\r\n              text = \"Not signed into Drive\";\r\n              break;\r\n      }\r\n\r\n      let showDocsLink = (this.props.noteDriveId.length > 0 && \r\n                            (this.state.syncStatus === DriveSyncStatus.SYNCED ||\r\n                             this.state.syncStatus === DriveSyncStatus.SYNCING));\r\n    return (\r\n      <div className={\"view-in-docs-link \" + className}>\r\n        {showDocsLink && \r\n                <a href={\"https://docs.google.com/document/d/\" + this.props.noteDriveId + \"/edit\"}\r\n                    rel=\"noopener noreferrer\"\r\n                    target=\"_blank\">\r\n            View Note in Drive\r\n          </a>}\r\n          {!showDocsLink && text}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\ninterface LockIconProps {\r\n  noteLocked: boolean\r\n}\r\n\r\ninterface LockIconState {\r\n}\r\n\r\nclass LockIcon extends React.Component<LockIconProps, LockIconState> {\r\n  render() {\r\n      let visibleText = this.props.noteLocked ? \"visible\" : \"invisible\";\r\n\r\n      return (\r\n          <span className={\"note-locked-icon \" + visibleText}\r\n                title=\"Timestamps are locked. Unlock via the menu.\"></span>\r\n      )\r\n  }\r\n}\r\n\r\ninterface StatusAreaProps {\r\n    noteDriveId: string;\r\n    timestampsLocked: boolean;\r\n}\r\n\r\ninterface StatusAreaState {}\r\n\r\nexport default class StatusArea extends React.Component<StatusAreaProps, StatusAreaState> {\r\n    render() {\r\n        return <div className=\"status-area\">\r\n            <SyncStatusArea noteDriveId={this.props.noteDriveId} />\r\n            <LockIcon noteLocked={this.props.timestampsLocked} />\r\n        </div>\r\n\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { NoteRow } from './noterow';\nimport { NoteLine } from './NoteLine';\nimport { NoteTitle } from './notetitle';\nimport { Note } from './Note';\nimport { Menu } from './menu';\nimport NoteContentHandler from './NoteContentHandler';\nimport DriveSyncHandler, { DriveSignInState } from './DriveSyncHandler';\nimport StatusArea from './statusarea';\n\n\ndeclare var gapi: any\n\nconst SYNC_TIMEOUT = 2000;\n\ninterface AppProps {\n}\n\ninterface AppState {\n  focusedNoteRowId: number\n  note: Note\n}\n\nclass App extends React.Component<AppProps, AppState> {\n  wrapperElement = React.createRef<HTMLDivElement>();\n\n  private editedSinceLastDriveSync = false;\n  private syncTimer: NodeJS.Timeout | null = null;\n\n  constructor(props: AppProps) {\n    super(props);\n    DriveSyncHandler.init();\n\n    let note = NoteContentHandler.getLastEditedNote();\n    let firstNoteLineId: number;\n\n    if (note === null) {\n      note = this.createNewNote();\n      firstNoteLineId = note.getFirstNoteLineId();\n    } else {\n      firstNoteLineId = note.getFirstNoteLineId();\n    }\n    this.state = { note: note, focusedNoteRowId: firstNoteLineId };\n  }\n\n  createNewNote(): Note {\n      let note = new Note();\n      note.addLine();\n\n      return note;\n  }\n\n  componentDidMount() {\n    this.updateWindowTitle();\n    DriveSyncHandler.addSignInStateHandler((state: DriveSignInState) => {\n      if (state !== DriveSignInState.SIGNED_IN) {\n        if (this.syncTimer !== null) {\n          clearTimeout(this.syncTimer);\n          this.syncTimer = null;\n        }\n        return;\n      }\n\n      DriveSyncHandler.saveNote(this.state.note).then(() => {\n        setTimeout(this.syncTimerHandler.bind(this), SYNC_TIMEOUT);\n      });\n    });\n  }\n\n  componentDidUpdate(oldProps: AppProps, oldState: AppState) {\n    if (oldState.note.getTitle() !== this.state.note.getTitle()) {\n      this.updateWindowTitle();      \n    }\n\n  }\n\n  async syncTimerHandler() {\n    if (this.editedSinceLastDriveSync) {\n      let id = await DriveSyncHandler.saveNote(this.state.note);\n      if (id.length > 0) {\n        let note = this.state.note;\n        note.setDriveId(id);\n        this.setState({ note: note })\n      }\n      this.editedSinceLastDriveSync = false;\n    }\n\n    this.syncTimer = setTimeout(this.syncTimerHandler.bind(this), SYNC_TIMEOUT);\n  }\n\n  render() {\n    let noteRows = this.state.note.getLines().map(noteRow => {\n      return (<NoteRow keyDownHandler={this.handleNoteRowKeyDown.bind(this)}\n        focusHandler={this.noteRowFocusHandler.bind(this)}\n        note={this.state.note}\n        rowId={noteRow.id}\n        key={noteRow.id}\n        focused={noteRow.id === this.state.focusedNoteRowId} />);\n    });\n\n    return (\n      <div className=\"App\" ref={this.wrapperElement}>\n        <div className=\"header\">\n          <NoteTitle title={this.state.note.getTitle()} titleChangeHandler={this.handleTitleChange.bind(this)} />\n          <StatusArea noteDriveId={this.state.note.getDriveId()}\n                      timestampsLocked={this.state.note.getTimestampsLocked()} />\n          <Menu timestampsLocked={this.state.note.getTimestampsLocked()} \n            newNoteHandler={this.newNoteHandler.bind(this)}\n            timestampLockToggleHandler={this.handleToggleTimestampsLocked.bind(this)}\n            signOutHandler={this.signOutHandler.bind(this)}\n            signInHandler={this.signInHandler.bind(this)} />\n        </div>\n        {noteRows}\n      </div>\n    );\n  }\n\n  signInHandler() {\n    gapi.auth2.getAuthInstance().signIn();\n  }\n\n  signOutHandler() {\n    gapi.auth2.getAuthInstance().signOut();\n  }\n\n  handleTitleChange(newTitle: string) {\n    this.state.note.setTitle(newTitle);\n    this.setState({ note: this.state.note });\n    NoteContentHandler.updateNote(this.state.note);\n  }\n\n  updateWindowTitle() {\n    document.title = this.state.note.getTitle() + \" - Interview Notes\";\n  }\n\n  handleToggleTimestampsLocked() {\n    let note = this.state.note;\n\n    note.setTimestampsLocked(!note.getTimestampsLocked());\n    this.setState({ note: note });\n  }\n\n  newNoteHandler() {\n    let note = this.createNewNote();\n    // Set this to true so that a sync happens immediately.\n    this.editedSinceLastDriveSync = true;\n    this.setState({ note: note, focusedNoteRowId: note.getFirstNoteLineId() });\n  }\n\n  handleNoteRowKeyDown(noteRow: NoteLine, e: React.KeyboardEvent) {\n    this.editedSinceLastDriveSync = true;\n\n    if (e.key === \"Enter\") {\n      e.preventDefault();\n      this.setState((props, state) => {\n        let note = this.state.note;\n        let newNote = note.addLine(noteRow.getIndentedUnits());\n\n        return { note: note, focusedNoteRowId: newNote.id }\n      });\n      return false;\n    } else if (e.key === \"Backspace\") {\n      let focusedRow = this.state.note.getLine(this.state.focusedNoteRowId);\n      if (focusedRow !== undefined && focusedRow.isEmpty() && this.state.note.getLines().length > 1) {\n        let nextFocusedRowId = this.state.note.getPreviousRowId(this.state.focusedNoteRowId);\n        this.state.note.deleteRow(this.state.focusedNoteRowId);\n\n        if (nextFocusedRowId !== null) {\n          this.setState({ focusedNoteRowId: nextFocusedRowId });\n        } else {\n          console.error(\"Got a null previous row id relative to: \", this.state.focusedNoteRowId);\n          this.setState({ focusedNoteRowId: this.state.note.getFirstNoteLineId() });\n        }\n\n        NoteContentHandler.updateNote(this.state.note);\n\n        // Since we're catching the keydown event, if we don't call preventDefault,\n        // a character will get deleted on the line that gets focus.\n        e.preventDefault();\n\n      }\n    } else {\n      return true;\n    }\n\n  }\n\n  noteRowFocusHandler(note: NoteLine) {\n    this.setState({ focusedNoteRowId: note.id });\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}